Interesting algorithms problem. Suppose:
0) The map of the US is an n*n grid on which you can move up/down/left/right with no rollover.
1) You have some number of hours 
2) You have some number of "interesting destinations" you would (like? need?) to visit before this time is up.
3) Some of the up/down/left/right transitions take more time than others
4) The optimal solution visits as many interesting nodes as possible before time is up s.t. you end up at the desired destination.

THE ALGORITHM:

Effectively we start from dijkstra's and relax uniqueness constraints - so we eliminate the visiting set and allow for repetition of nodes.


DOES NOT HAVE:
    Any kind of sane ingestion API or function. Data should be inputted as-is.
    The initial all-pairs-all-shortest-path reduction for the Tourist nodes. This is commented out right now.
    The LazyGraph, which is very close to being fully verified with tests, as actually being used.
DOES HAVE:
    The actual, core greedy tourist algorithm (arguably the most important part of this problem) which reduces the original grid to the distances between Tourist nodes.
    The LazyGraph data structure (mostly) verified and working.

TO USE:
    Make sure you have Python3 installed.

    Call the tourist() function yourself! If you want an "Engineer's Proof" of correctness look at the test cases. You can run them yourself by executing the simple tests script ./run_tests
    
